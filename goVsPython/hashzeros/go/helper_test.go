package hashzeros

import "testing"

//!+test
func TestHashTextNonce(t *testing.T) {
	var tests = []struct {
		text  []byte
		nonce int
		want  [32]byte
	}{
		{[]byte("test-"), 0, [32]byte{63, 88, 81, 97, 127, 54, 254, 163, 21, 200, 89, 67, 47, 85, 104, 255, 50, 184, 147, 245, 51, 115, 215, 161, 13, 228, 90, 89, 34, 141, 59, 201}},
		{[]byte("test-"), 1, [32]byte{237, 30, 29, 207, 151, 25, 144, 193, 184, 150, 118, 174, 120, 84, 54, 16, 111, 117, 72, 177, 174, 65, 209, 116, 202, 157, 59, 251, 150, 97, 164, 119}},
		{[]byte("test-"), 2, [32]byte{224, 99, 205, 243, 111, 129, 122, 36, 233, 120, 57, 176, 121, 156, 2, 54, 68, 221, 28, 49, 198, 104, 189, 166, 72, 24, 105, 2, 112, 53, 166, 85}},
		{[]byte("test-"), 3, [32]byte{42, 140, 159, 5, 30, 145, 190, 29, 15, 128, 25, 128, 169, 232, 127, 132, 149, 88, 38, 104, 217, 102, 182, 51, 191, 222, 93, 138, 147, 208, 224, 73}},
		{[]byte("test-"), 4, [32]byte{169, 235, 243, 173, 115, 8, 71, 143, 236, 47, 2, 64, 202, 180, 96, 91, 205, 88, 118, 179, 54, 29, 39, 93, 95, 76, 237, 245, 119, 15, 219, 18}},
		{[]byte("test-"), 5, [32]byte{95, 113, 178, 127, 130, 111, 241, 109, 29, 149, 84, 81, 173, 14, 47, 223, 192, 3, 144, 201, 197, 103, 141, 163, 45, 63, 250, 38, 237, 32, 100, 200}},

		{[]byte("test"), 25, [32]byte{3, 66, 132, 15, 99, 64, 209, 86, 145, 244, 190, 28, 14, 1, 87, 251, 9, 131, 153, 44, 79, 67, 108, 24, 38, 125, 65, 219, 230, 187, 116, 162}},
		{[]byte("test"), 304, [32]byte{0, 159, 163, 113, 205, 11, 115, 106, 184, 14, 141, 85, 197, 116, 25, 68, 221, 14, 116, 11, 189, 146, 201, 120, 8, 247, 64, 160, 55, 34, 87, 107}},
		{[]byte("test"), 338, [32]byte{0, 9, 152, 22, 23, 80, 150, 211, 194, 232, 94, 85, 120, 67, 216, 253, 253, 217, 150, 101, 157, 244, 61, 22, 197, 150, 167, 155, 251, 232, 45, 23}},
	}

	for i, test := range tests {
		if got := HashTextNonce(test.text, test.nonce); got != test.want {
			t.Errorf("index : %d ; HashTextNonce(%v,%v) \nexpected:%v\ngot:%v\n", i, test.text, test.nonce, test.want, got)
		}
	}
}

func TestChackHexadecimalZeros(t *testing.T) {
	var tests = []struct {
		input []byte
		zeros string
		want  bool
	}{
		{[]byte{34, 204, 214, 48, 153, 179, 1, 254, 214, 35, 218, 36, 126, 110, 208, 55, 125, 237, 113, 81, 26, 2, 8, 37, 214, 58, 103, 62, 68, 37, 75, 77}, "0", false},
		{[]byte{75, 231, 194, 115, 255, 206, 37, 102, 120, 142, 28, 179, 37, 89, 70, 188, 53, 62, 13, 255, 177, 71, 196, 3, 66, 136, 66}, "0", false},
		{[]byte{137, 229, 137, 209, 98, 86, 161, 178, 119, 189, 97, 50, 247, 234, 105, 168, 34, 135, 244, 178, 87, 77, 149, 61, 190, 25}, "0", false},
		{[]byte{35, 96, 53, 220, 214, 252, 207, 53, 97, 240, 105, 91, 53, 166, 42, 90, 55, 12, 153, 70, 187, 119, 63, 41, 210, 55, 206, 1}, "0", false},
		{[]byte{238, 87, 204, 177, 249, 140, 11, 195, 189, 44, 202, 218, 168, 189, 207, 31, 60, 106, 155, 175, 84, 154, 39, 192, 65, 19}, "0", false},
		{[]byte{141, 168, 236, 220, 49, 241, 192, 237, 146, 197, 171, 231, 247, 10, 223, 8, 232, 207, 190, 27, 245, 225, 95, 239, 248}, "0", false},

		{[]byte{14, 201, 9, 162, 92, 200, 246, 180, 44, 143, 118, 151, 97, 26, 92, 91, 232, 86, 117, 96, 200, 241, 24, 22, 1, 90, 65, 152, 143, 165, 34, 139, 228}, "00", false},
		{[]byte{14, 201, 9, 162, 92, 200, 246, 180, 44, 143, 118, 151, 97, 26, 92, 91, 232, 86, 117, 96, 200, 241, 24, 22, 1, 90, 65, 152, 143, 165, 34, 139, 228}, "000", false},

		{[]byte{14, 201, 9, 162, 92, 200, 246, 180, 44, 143, 118, 151, 97, 26, 92, 91, 232, 86, 117, 96, 200, 241, 24, 22, 1, 90, 65, 152, 143, 165, 34, 139, 228}, "0", true},
		{[]byte{0, 192, 243, 43, 241, 48, 6, 167, 241, 230, 230, 233, 114, 246, 79, 235, 235, 3, 62, 201, 15, 122, 223, 46, 118, 126, 133, 226, 19, 141, 1, 48}, "00", true},
		{[]byte{0, 9, 19, 231, 190, 132, 165, 200, 117, 84, 16, 156, 128, 60, 47, 62, 121, 188, 248, 200, 2, 227, 133, 144, 134, 238, 109, 75, 194, 168, 156, 104}, "000", true},

		//HashTextNonce([]byte("test"), 25)
		{[]byte{3, 66, 132, 15, 99, 64, 209, 86, 145, 244, 190, 28, 14, 1, 87, 251, 9, 131, 153, 44, 79, 67, 108, 24, 38, 125, 65, 219, 230, 187, 116, 162}, "0", true},
		//HashTextNonce([]byte("test"), 304)
		{[]byte{0, 159, 163, 113, 205, 11, 115, 106, 184, 14, 141, 85, 197, 116, 25, 68, 221, 14, 116, 11, 189, 146, 201, 120, 8, 247, 64, 160, 55, 34, 87, 107}, "00", true},
		//HashTextNonce([]byte("test"), 338)
		{[]byte{0, 9, 152, 22, 23, 80, 150, 211, 194, 232, 94, 85, 120, 67, 216, 253, 253, 217, 150, 101, 157, 244, 61, 22, 197, 150, 167, 155, 251, 232, 45, 23}, "000", true},
	}
	for i, test := range tests {
		if got, _ := ChackHexadecimalZeros(test.input, test.zeros); got != test.want {
			t.Errorf("index : %d ; ChackHexadecimalZeros(%v) = %v", i, test.input, got)
		}
	}
}

func TestMoreZerosInChackHexadecimalZeros(t *testing.T) {
	var tests = []struct {
		input      []byte
		zeros      string
		want       bool
		wantString string
	}{
		//HashTextNonce([]byte("test"), 2125381) //00000
		{[]byte{0, 0, 11, 253, 40, 226, 25, 123, 45, 58, 175, 158, 146, 78, 197, 125, 18, 84, 157, 120, 229, 9, 160, 123, 189, 163, 34, 160, 10, 96, 176, 121}, "00", true, "00000"},
		//HashTextNonce([]byte("test"), 81965191) //000000
		{[]byte{0, 0, 0, 192, 214, 246, 255, 2, 76, 244, 56, 30, 222, 20, 43, 124, 41, 187, 125, 242, 142, 33, 241, 152, 91, 94, 187, 78, 250, 249, 170, 171}, "00", true, "000000"},
		//HashTextNonce([]byte("foo"), 41492043) //000000
		{[]byte{0, 0, 0, 40, 139, 195, 89, 203, 233, 220, 197, 93, 79, 107, 52, 92, 89, 75, 140, 145, 243, 63, 4, 169, 10, 116, 246, 24, 175, 129, 247, 205}, "00", true, "000000"},

		{[]byte{35, 96, 53, 220, 214, 252, 207, 53, 97, 240, 105, 91, 53, 166, 42, 90, 55, 12, 153, 70, 187, 119, 63, 41, 210, 55, 206, 1}, "0", false, ""},
		{[]byte{238, 87, 204, 177, 249, 140, 11, 195, 189, 44, 202, 218, 168, 189, 207, 31, 60, 106, 155, 175, 84, 154, 39, 192, 65, 19}, "0", false, ""},
		{[]byte{141, 168, 236, 220, 49, 241, 192, 237, 146, 197, 171, 231, 247, 10, 223, 8, 232, 207, 190, 27, 245, 225, 95, 239, 248}, "0", false, ""},
	}
	for i, test := range tests {
		if got, gotString := ChackHexadecimalZeros(test.input, test.zeros); got != test.want || gotString != test.wantString {
			t.Errorf("i:%d|ChackHexadecimalZeros(%v,%v) \nexpected:%v,%v\ngot:%v,%v\n",
				i, test.input, test.zeros, test.want, test.wantString, got, gotString)

		}
	}
}

//!-test

//!+bench

func BenchmarkHashTextNonce(b *testing.B) {
	data := []byte("test")
	for i := 0; i < b.N; i++ {
		HashTextNonce(data, i)
	}
}

func BenchmarkChackHexadecimalZeros(b *testing.B) {
	data := []byte("test")
	hash := HashTextNonce(data, 25)
	for i := 0; i < b.N; i++ {
		ChackHexadecimalZeros(hash[:], "0")
	}
}

//!-bench
